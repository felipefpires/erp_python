#!/usr/bin/env python3
"""
Script para testar se o erro na aba categorias foi corrigido
"""

import requests
import time
from urllib.parse import urljoin

# Configura√ß√µes
BASE_URL = "http://localhost:5000"
LOGIN_URL = urljoin(BASE_URL, "/auth/login")
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "admin123"

def test_login():
    """Testa o login do administrador"""
    print("üîê Testando login...")
    
    session = requests.Session()
    
    try:
        # Fazer login
        login_data = {
            'username': ADMIN_USERNAME,
            'password': ADMIN_PASSWORD
        }
        
        response = session.post(LOGIN_URL, data=login_data, allow_redirects=False)
        
        if response.status_code == 302:  # Redirect ap√≥s login bem-sucedido
            print("‚úÖ Login realizado com sucesso")
            return session
        else:
            print(f"‚ùå Falha no login. Status: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao fazer login: {e}")
        return None

def test_categorias_page(session):
    """Testa a p√°gina de categorias"""
    print("\nüè∑Ô∏è Testando p√°gina de categorias...")
    
    try:
        response = session.get(urljoin(BASE_URL, "/inventory/categories"))
        if response.status_code == 200:
            print("‚úÖ P√°gina de categorias carregada com sucesso")
            
            # Verificar se h√° erros no conte√∫do
            if "error" in response.text.lower() or "exception" in response.text.lower():
                print("‚ö†Ô∏è  Poss√≠vel erro detectado no conte√∫do da p√°gina")
                return False
            else:
                print("‚úÖ Nenhum erro detectado no conte√∫do")
                return True
        else:
            print(f"‚ùå Erro {response.status_code} na p√°gina de categorias")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar p√°gina de categorias: {e}")
        return False

def test_new_category_page(session):
    """Testa a p√°gina de nova categoria"""
    print("\n‚ûï Testando p√°gina de nova categoria...")
    
    try:
        response = session.get(urljoin(BASE_URL, "/inventory/categories/new"))
        if response.status_code == 200:
            print("‚úÖ P√°gina de nova categoria carregada com sucesso")
            return True
        else:
            print(f"‚ùå Erro {response.status_code} na p√°gina de nova categoria")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar p√°gina de nova categoria: {e}")
        return False

def test_edit_category_page(session):
    """Testa a p√°gina de editar categoria (se houver categorias)"""
    print("\n‚úèÔ∏è Testando p√°gina de editar categoria...")
    
    try:
        # Primeiro, verificar se h√° categorias
        categories_response = session.get(urljoin(BASE_URL, "/inventory/categories"))
        if categories_response.status_code == 200:
            # Tentar acessar a primeira categoria (ID 1)
            response = session.get(urljoin(BASE_URL, "/inventory/categories/1/edit"))
            if response.status_code == 200:
                print("‚úÖ P√°gina de editar categoria carregada com sucesso")
                return True
            elif response.status_code == 404:
                print("‚ÑπÔ∏è  Nenhuma categoria encontrada para editar (404)")
                return True  # N√£o √© um erro, apenas n√£o h√° categorias
            else:
                print(f"‚ùå Erro {response.status_code} na p√°gina de editar categoria")
                return False
        else:
            print(f"‚ùå Erro ao verificar categorias: {categories_response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar p√°gina de editar categoria: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Testando corre√ß√£o do erro na aba categorias...")
    print("=" * 60)
    
    # Aguardar o servidor inicializar
    print("‚è≥ Aguardando servidor inicializar...")
    time.sleep(3)
    
    # Fazer login
    session = test_login()
    if not session:
        print("‚ùå N√£o foi poss√≠vel fazer login. Abortando testes.")
        return
    
    # Testar cada funcionalidade
    resultados = []
    
    resultados.append(test_categorias_page(session))
    resultados.append(test_new_category_page(session))
    resultados.append(test_edit_category_page(session))
    
    # Resumo
    print("\n" + "=" * 60)
    print("üìã RESUMO DOS TESTES")
    print("=" * 60)
    
    testes = [
        "P√°gina de Categorias",
        "P√°gina de Nova Categoria", 
        "P√°gina de Editar Categoria"
    ]
    
    for i, (teste, resultado) in enumerate(zip(testes, resultados), 1):
        status = "‚úÖ FUNCIONANDO" if resultado else "‚ùå COM ERRO"
        print(f"{i}. {teste}: {status}")
    
    total_funcionando = sum(resultados)
    print(f"\nüéØ Total: {total_funcionando}/3 funcionalidades funcionando")
    
    if total_funcionando == 3:
        print("üéâ Todos os testes passaram! O erro foi corrigido com sucesso!")
    else:
        print("‚ö†Ô∏è  Alguns problemas ainda precisam ser corrigidos.")

if __name__ == "__main__":
    main()

