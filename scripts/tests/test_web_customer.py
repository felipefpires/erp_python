#!/usr/bin/env python3
"""
Teste para verificar se a p√°gina web de cadastro de clientes est√° funcionando
"""

import requests

def test_web_customer():
    base_url = "http://localhost:5000"
    
    print("üåê Testando p√°gina web de cadastro de clientes...")
    print("=" * 50)
    
    try:
        # 1. Testar p√°gina inicial
        print("1. Testando p√°gina inicial...")
        response = requests.get(base_url, timeout=5)
        
        if response.status_code == 200:
            print("   ‚úÖ P√°gina inicial carregada")
        else:
            print(f"   ‚ùå Erro na p√°gina inicial (Status: {response.status_code})")
            return False
        
        # 2. Testar p√°gina de login
        print("\n2. Testando p√°gina de login...")
        login_response = requests.get(f"{base_url}/login", timeout=5)
        
        if login_response.status_code == 200:
            print("   ‚úÖ P√°gina de login carregada")
        else:
            print(f"   ‚ùå Erro na p√°gina de login (Status: {login_response.status_code})")
            return False
        
        # 3. Fazer login
        print("\n3. Fazendo login...")
        login_data = {
            'username': 'admin',
            'password': 'admin123'
        }
        
        session = requests.Session()
        auth_response = session.post(f"{base_url}/login", data=login_data, timeout=5)
        
        if auth_response.status_code == 302:  # Redirecionamento ap√≥s login
            print("   ‚úÖ Login realizado com sucesso")
        else:
            print(f"   ‚ùå Erro no login (Status: {auth_response.status_code})")
            return False
        
        # 4. Testar p√°gina de clientes
        print("\n4. Testando p√°gina de clientes...")
        customers_response = session.get(f"{base_url}/crm/customers", timeout=5)
        
        if customers_response.status_code == 200:
            print("   ‚úÖ P√°gina de clientes carregada")
        else:
            print(f"   ‚ùå Erro na p√°gina de clientes (Status: {customers_response.status_code})")
            return False
        
        # 5. Testar p√°gina de novo cliente
        print("\n5. Testando p√°gina de novo cliente...")
        new_customer_response = session.get(f"{base_url}/crm/customers/new", timeout=5)
        
        if new_customer_response.status_code == 200:
            print("   ‚úÖ P√°gina de novo cliente carregada")
            
            # Verificar se a p√°gina cont√©m o campo Instagram
            if 'instagram' in new_customer_response.text.lower():
                print("   ‚úÖ Campo Instagram encontrado na p√°gina")
            else:
                print("   ‚ö†Ô∏è Campo Instagram n√£o encontrado na p√°gina")
        else:
            print(f"   ‚ùå Erro na p√°gina de novo cliente (Status: {new_customer_response.status_code})")
            return False
        
        print("\nüéâ Todos os testes web passaram com sucesso!")
        print("üìù Agora voc√™ pode testar manualmente:")
        print("   1. Acesse: http://localhost:5000")
        print("   2. Fa√ßa login com: admin / admin123")
        print("   3. V√° para CRM > Clientes > Novo Cliente")
        print("   4. Teste criar um cliente (apenas o nome √© obrigat√≥rio)")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor")
        print("   Certifique-se de que o servidor Flask est√° rodando")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

if __name__ == "__main__":
    test_web_customer()
